AWSTemplateFormatVersion: "2010-09-09"
Description: "Launch a simple VPC"
Parameters:
  VPCCIDRBlock:
    Type: String
    Description: "Enter valid CIDR block values for VPC. Default is 10.0.0.0/16"
  PublicSubnetCIDRBlock:
    Type: String
    Description: "Enter valid CIDR block values for public subnet. Default is 10.0.0.0/24"
  PrivateSubnetCIDRBlock:
    Type: String
    Description: "Enter valid CIDR block values for private subnet. Default is 10.0.1.0/24"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock:
        Ref: VPCCIDRBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnetCIDRBlock
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnetCIDRBlock
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  VPCEIP:
    DependsOn: VPC
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - VPCEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  PrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      NetworkAclId:
        Ref: NetworkAcl
  EgressNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"
  ICMPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: '110'
      Protocol: '1'
      Icmp:
        Code: "-1"
        Type: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '-1'
        To: '-1'
Outputs:
  NetVPC:
    Description: "The VPC ID"
    Value:
      Ref: VPC 
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCID"
  PublicNetSubnet:
    Description: "The network public subnet ID"
    Value:
      Ref: PublicSubnet
    Export: 
      Name: !Sub "${AWS::Region}-${AWS::StackName}-Public-Subnet"
  PrivateNetSubnet:
    Description: "The network private subnet ID"
    Value:
      Ref: PrivateSubnet
    Export: 
      Name: !Sub "${AWS::Region}-${AWS::StackName}-Private-Subnet"














